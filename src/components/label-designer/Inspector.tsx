/**
 * –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–∫–µ—Ç–∞ –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */

import React from 'react';
import { useDesignerStore } from './store';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Button } from '../../components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Switch } from '../../components/ui/switch';
import { DATA_FIELDS } from './types';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { Badge } from '../../components/ui/badge';
import { Separator } from '../../components/ui/separator';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../../components/ui/tooltip';

const NumberInput: React.FC<{
  label: string;
  value: number;
  step?: number;
  onChange: (v: number) => void;
  suffix?: string;
  tooltip?: string;
}> = ({ label, value, step = 1, onChange, suffix, tooltip }) => (
  <div className="space-y-1">
    <Label className="text-xs flex items-center gap-1">
      {label}
      {tooltip && (
        <Tooltip>
          <TooltipTrigger asChild>
            <span className="text-gray-400 cursor-help">‚ìò</span>
          </TooltipTrigger>
          <TooltipContent className="max-w-xs">
            <p>{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      )}
    </Label>
    <div className="flex items-center gap-2">
      <Input
        type="number"
        value={value}
        onChange={(e) => onChange(parseFloat(e.target.value || '0'))}
        step={step}
        className="h-8 transition-colors hover:border-gray-300 focus:border-blue-500"
      />
      {suffix && <span className="text-xs text-gray-500">{suffix}</span>}
    </div>
  </div>
);

const Inspector: React.FC = () => {
  const { label, setLabel, selectedId, elements, updateElement, deleteSelected, duplicateSelected } =
    useDesignerStore();

  const el = elements.find((e) => e.id === selectedId) as any;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç
  const insertDataField = (fieldName: string) => {
    if (!el || el.type !== 'text') return;
    
    const currentText = el.text || '';
    const newText = currentText + `{${fieldName}}`;
    updateElement(el.id, { 
      text: newText,
      dataField: fieldName 
    } as any);
  };

  return (
    <TooltipProvider>
      <div className="h-full overflow-auto p-4 space-y-6 bg-gray-50">
        {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–∫–µ—Ç–∞ */}
        <Card className="shadow-sm hover:shadow-md transition-shadow">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-semibold flex items-center gap-2">
              ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–∫–µ—Ç–∞
              <Badge variant="outline" className="text-xs">
                {label.widthMm}√ó{label.heightMm} –º–º
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-3">
              <NumberInput 
                label="–®–∏—Ä–∏–Ω–∞" 
                value={label.widthMm} 
                suffix="–º–º" 
                onChange={(v) => setLabel({ widthMm: v })}
                tooltip="–®–∏—Ä–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
              />
              <NumberInput 
                label="–í—ã—Å–æ—Ç–∞" 
                value={label.heightMm} 
                suffix="–º–º" 
                onChange={(v) => setLabel({ heightMm: v })}
                tooltip="–í—ã—Å–æ—Ç–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
              />
              <NumberInput 
                label="–°–µ—Ç–∫–∞" 
                value={label.gridMm} 
                suffix="–º–º" 
                onChange={(v) => setLabel({ gridMm: Math.max(1, v) })}
                tooltip="–†–∞–∑–º–µ—Ä —à–∞–≥–∞ —Å–µ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
              />
              <NumberInput 
                label="–ü–æ—Ä–æ–≥ –º–∞–≥–Ω–∏—Ç–æ–≤" 
                value={label.snapThreshold} 
                suffix="–º–º" 
                onChange={(v) => setLabel({ snapThreshold: Math.max(0.5, v) })}
                tooltip="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è"
              />
            </div>
            
            <Separator />
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label htmlFor="orientation" className="text-xs flex items-center gap-1">
                  üß≠ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-gray-400 cursor-help">‚ìò</span>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                    </TooltipContent>
                  </Tooltip>
                </Label>
                <Select value={label.orientation} onValueChange={(v) => setLabel({ orientation: v as any })}>
                  <SelectTrigger className="h-8 w-32 transition-colors hover:border-gray-300">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="portrait">üì± –ü–æ—Ä—Ç—Ä–µ—Ç</SelectItem>
                    <SelectItem value="landscape">üñ•Ô∏è –ê–ª—å–±–æ–º</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="flex items-center justify-between">
                <Label htmlFor="showGrid" className="text-xs flex items-center gap-1">
                  üéØ –°–µ—Ç–∫–∞
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-gray-400 cursor-help">‚ìò</span>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                    </TooltipContent>
                  </Tooltip>
                </Label>
                <Switch
                  id="showGrid"
                  checked={label.showGrid}
                  onCheckedChange={(checked) => setLabel({ showGrid: checked })}
                  className="data-[state=checked]:bg-blue-600"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <Label htmlFor="magneticGuides" className="text-xs flex items-center gap-1">
                  üß≤ –ú–∞–≥–Ω–∏—Ç—ã
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-gray-400 cursor-help">‚ìò</span>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>
                    </TooltipContent>
                  </Tooltip>
                </Label>
                <Switch
                  id="magneticGuides"
                  checked={label.magneticGuides}
                  onCheckedChange={(checked) => setLabel({ magneticGuides: checked })}
                  className="data-[state=checked]:bg-red-600"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
        <Card className="shadow-sm hover:shadow-md transition-shadow">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-semibold flex items-center gap-2">
              {!el ? 'üìÑ –≠–ª–µ–º–µ–Ω—Ç' : `üîß ${el.type.charAt(0).toUpperCase() + el.type.slice(1)}`}
              {el && (
                <Badge variant="secondary" className="text-xs">
                  ID: {el.id.slice(-4)}
                </Badge>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {!el ? (
              <div className="text-xs text-gray-500 text-center py-4">
                üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              </div>
            ) : (
              <div className="space-y-4">
                {/* –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä */}
                <div className="grid grid-cols-2 gap-3">
                  <NumberInput 
                    label="–ü–æ–∑–∏—Ü–∏—è X" 
                    value={el.x} 
                    suffix="–º–º" 
                    onChange={(v) => updateElement(el.id, { x: v })}
                    tooltip="–ü–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"
                  />
                  <NumberInput 
                    label="–ü–æ–∑–∏—Ü–∏—è Y" 
                    value={el.y} 
                    suffix="–º–º" 
                    onChange={(v) => updateElement(el.id, { y: v })}
                    tooltip="–ü–æ–∑–∏—Ü–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"
                  />
                  <NumberInput 
                    label="–®–∏—Ä–∏–Ω–∞" 
                    value={el.w} 
                    suffix="–º–º" 
                    onChange={(v) => updateElement(el.id, { w: Math.max(1, v) })}
                    tooltip="–®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"
                  />
                  <NumberInput 
                    label="–í—ã—Å–æ—Ç–∞" 
                    value={el.h} 
                    suffix="–º–º" 
                    onChange={(v) => updateElement(el.id, { h: Math.max(0, v) })}
                    tooltip="–í—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"
                  />
                </div>

                {/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ */}
                {el.type === 'text' && (
                  <>
                    <Separator />
                    
                    <div className="space-y-1">
                      <Label className="text-xs flex items-center gap-1">
                        ‚úèÔ∏è –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <span className="text-gray-400 cursor-help">‚ìò</span>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞</p>
                          </TooltipContent>
                        </Tooltip>
                      </Label>
                      <Input
                        value={el.text}
                        onChange={(e) => updateElement(el.id, { text: e.target.value } as any)}
                        className="h-8 transition-colors hover:border-gray-300 focus:border-blue-500"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
                      />
                    </div>
                    
                    {/* –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –¥–∞–Ω–Ω—ã–º */}
                    <div className="space-y-2">
                      <Label className="text-xs flex items-center gap-1">
                        üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –¥–∞–Ω–Ω—ã–º
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <span className="text-gray-400 cursor-help">‚ìò</span>
                          </TooltipTrigger>
                          <TooltipContent className="max-w-xs">
                            <p>–í—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏</p>
                          </TooltipContent>
                        </Tooltip>
                      </Label>
                      
                      <div className="grid grid-cols-2 gap-1">
                        {DATA_FIELDS.slice(0, 4).map((field) => (
                          <Tooltip key={field.value}>
                            <TooltipTrigger asChild>
                              <Button
                                variant="outline"
                                size="sm"
                                className="h-7 text-xs bg-blue-50 hover:bg-blue-100 transition-colors"
                                onClick={() => insertDataField(field.value)}
                              >
                                {field.label}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>–ü—Ä–∏–º–µ—Ä: {field.example}</p>
                            </TooltipContent>
                          </Tooltip>
                        ))}
                      </div>
                      
                      <Select onValueChange={insertDataField}>
                        <SelectTrigger className="h-7 text-xs transition-colors hover:border-gray-300">
                          <SelectValue placeholder="üìã –î—Ä—É–≥–∏–µ –ø–æ–ª—è..." />
                        </SelectTrigger>
                        <SelectContent>
                          {DATA_FIELDS.map((field) => (
                            <SelectItem key={field.value} value={field.value}>
                              <div>
                                <div className="font-medium">{field.label}</div>
                                <div className="text-xs text-gray-500">{field.example}</div>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      {el.dataField && (
                        <div className="text-xs text-green-600 bg-green-50 p-2 rounded border border-green-200">
                          ‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø–æ–ª—é: <strong>{el.dataField}</strong>
                        </div>
                      )}
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      <NumberInput
                        label="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                        value={el.fontSize}
                        onChange={(v) => updateElement(el.id, { fontSize: v } as any)}
                        suffix="pt"
                        tooltip="–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö"
                      />
                      <div className="space-y-1">
                        <Label className="text-xs">üéöÔ∏è –¢–æ–ª—â–∏–Ω–∞</Label>
                        <Select
                          value={el.fontWeight || 'normal'}
                          onValueChange={(v) => updateElement(el.id, { fontWeight: v as any } as any)}
                        >
                          <SelectTrigger className="h-8 transition-colors hover:border-gray-300">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="normal">–û–±—ã—á–Ω—ã–π</SelectItem>
                            <SelectItem value="semibold">–ü–æ–ª—É–∂–∏—Ä–Ω—ã–π</SelectItem>
                            <SelectItem value="bold">–ñ–∏—Ä–Ω—ã–π</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="space-y-1">
                      <Label className="text-xs">üìê –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ</Label>
                      <Select value={el.align || 'left'} onValueChange={(v) => updateElement(el.id, { align: v as any } as any)}>
                        <SelectTrigger className="h-8 transition-colors hover:border-gray-300">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">‚¨ÖÔ∏è –°–ª–µ–≤–∞</SelectItem>
                          <SelectItem value="center">‚è∫Ô∏è –ü–æ —Ü–µ–Ω—Ç—Ä—É</SelectItem>
                          <SelectItem value="right">‚û°Ô∏è –°–ø—Ä–∞–≤–∞</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </>
                )}

                {/* –°—Ç–∏–ª–∏ */}
                <Separator />
                
                <div className="grid grid-cols-2 gap-3">
                  <div className="space-y-1">
                    <Label className="text-xs">üé® –ó–∞–ª–∏–≤–∫–∞</Label>
                    <Input
                      type="color"
                      value={el.fill || '#00000000'}
                      onChange={(e) => updateElement(el.id, { fill: e.target.value })}
                      className="h-8 p-1 transition-colors hover:border-gray-300"
                    />
                  </div>
                  <div className="space-y-1">
                    <Label className="text-xs">üñäÔ∏è –û–±–≤–æ–¥–∫–∞</Label>
                    <Input
                      type="color"
                      value={el.stroke || '#000000'}
                      onChange={(e) => updateElement(el.id, { stroke: e.target.value })}
                      className="h-8 p-1 transition-colors hover:border-gray-300"
                    />
                  </div>
                  <NumberInput
                    label="–¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏"
                    value={el.strokeWidth ?? 1}
                    onChange={(v) => updateElement(el.id, { strokeWidth: v })}
                    tooltip="–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –æ–±–≤–æ–¥–∫–∏"
                  />
                  <NumberInput
                    label="–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å"
                    value={(el.opacity ?? 1) * 100}
                    onChange={(v) => updateElement(el.id, { opacity: Math.max(0, Math.min(1, v / 100)) })}
                    suffix="%"
                    tooltip="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞"
                  />
                </div>

                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                <Separator />
                
                <div className="flex gap-2 pt-2">
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="outline" className="bg-white hover:bg-gray-50 transition-colors flex-1" onClick={duplicateSelected}>
                        üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ (Ctrl+D)</TooltipContent>
                  </Tooltip>
                  
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="outline" className="bg-white text-red-600 border-red-200 hover:bg-red-50 transition-colors" onClick={deleteSelected}>
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç (Delete)</TooltipContent>
                  </Tooltip>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
};

export default Inspector;